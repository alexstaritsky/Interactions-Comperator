package intercomp;

import java.awt.Color;
import java.awt.Graphics;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * Graphical user interface for comparing interactions in a file.
 * @author Alexander
 */
public class InterCompGUI extends javax.swing.JFrame {

    // My own variable declaration
    public final boolean DEBUG = true;
    private InteractionsFile file;
    private InteractionComperator comparator;
    private boolean endingSetup = true;

    /**
     * Creates new form InterCompGUI
     */
    public InterCompGUI() {
        initComponents();
        addPathListener();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelFile = new javax.swing.JLabel();
        fieldPath = new javax.swing.JTextField();
        buttonBrowse = new javax.swing.JButton();
        buttonOpen = new javax.swing.JButton();
        scrollSummary = new javax.swing.JScrollPane();
        textSummary = new javax.swing.JTextArea();
        labelInteraction = new javax.swing.JLabel();
        comboIntLeft = new javax.swing.JComboBox<>();
        comboIntRight = new javax.swing.JComboBox<>();
        buttonExGenes = new javax.swing.JButton();
        buttonExPubMed = new javax.swing.JButton();
        panelVenn = new javax.swing.JPanel();
        buttonCompare = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Interactions Comperator");
        setResizable(false);

        labelFile.setText("File:");

        buttonBrowse.setText("Browse");
        buttonBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBrowseActionPerformed(evt);
            }
        });

        buttonOpen.setText("Open");
        buttonOpen.setEnabled(false);
        buttonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenActionPerformed(evt);
            }
        });

        scrollSummary.setEnabled(false);

        textSummary.setEditable(false);
        textSummary.setColumns(20);
        textSummary.setRows(5);
        textSummary.setEnabled(false);
        scrollSummary.setViewportView(textSummary);

        labelInteraction.setText("Select types of interaction:");
        labelInteraction.setEnabled(false);

        comboIntLeft.setEnabled(false);

        comboIntRight.setEnabled(false);

        buttonExGenes.setText("Export Genes");
        buttonExGenes.setEnabled(false);
        buttonExGenes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExGenesActionPerformed(evt);
            }
        });

        buttonExPubMed.setText("Export PubMed");
        buttonExPubMed.setEnabled(false);
        buttonExPubMed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExPubMedActionPerformed(evt);
            }
        });

        panelVenn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelVenn.setEnabled(false);

        javax.swing.GroupLayout panelVennLayout = new javax.swing.GroupLayout(panelVenn);
        panelVenn.setLayout(panelVennLayout);
        panelVennLayout.setHorizontalGroup(
            panelVennLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelVennLayout.setVerticalGroup(
            panelVennLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        buttonCompare.setText("Compare");
        buttonCompare.setEnabled(false);
        buttonCompare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCompareActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollSummary)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fieldPath, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonBrowse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonOpen, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboIntLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comboIntRight, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(panelVenn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(buttonExPubMed, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(buttonExGenes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(buttonCompare, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(341, 341, 341)
                .addComponent(labelInteraction)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelFile)
                    .addComponent(fieldPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonBrowse)
                    .addComponent(buttonOpen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollSummary, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelInteraction)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboIntRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboIntLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelVenn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(buttonCompare)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                        .addComponent(buttonExGenes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonExPubMed)
                        .addGap(47, 47, 47))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBrowseActionPerformed
        String path = browseFile(0);
        if (path != null) {
            fieldPath.setText(path);
        }
    }//GEN-LAST:event_buttonBrowseActionPerformed

    private void buttonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenActionPerformed
        String path = fieldPath.getText();
        if (!path.equals("")) {
            try {
                file = new InteractionsFile(path);
                updateFields();
            } catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Specified file not found", "Error", 0);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "There was a problem reading the file", "Error", 0);
            } catch (IndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(null, "The specified file has not the correct format", "Error", 0);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Unreported error occured: " + e.getMessage(), "Error", 0);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No path specified!", "Error", 2);
        }
    }//GEN-LAST:event_buttonOpenActionPerformed

    private void buttonCompareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCompareActionPerformed
        if (endingSetup) {
            comparator = new InteractionComperator(((String) comboIntLeft.getSelectedItem()), ((String) comboIntRight.getSelectedItem()), file.getInteractions());
            buttonExGenes.setEnabled(true);
            buttonExPubMed.setEnabled(true);
            endingSetup = false;
            drawVennDiagram();
        } else {
            comparator.setTypeA(((String) comboIntLeft.getSelectedItem()));
            comparator.setTypeB(((String) comboIntRight.getSelectedItem()));
            comparator.setInteractions(file.getInteractions());
            comparator.compare();
            drawVennDiagram();
        }
    }//GEN-LAST:event_buttonCompareActionPerformed

    private void buttonExGenesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExGenesActionPerformed
        try {
            String path = browseFile(1);
            if (!path.endsWith(".txt")) {
                path += ".txt";
            }
            File file = new File(path);
            if (path != null & !file.exists() & !file.isDirectory()) {
                comparator.exportGenes(path);
                JOptionPane.showMessageDialog(null, "Successfully exported all genes!", "Success", 1);
            } else if (file.exists() & !file.isDirectory()) {
                int reply = JOptionPane.showConfirmDialog(null, String.format("Are you sure you want to overwrite '%s' with genes?", file.getName()), "Warning", 0);
                if (reply == JOptionPane.YES_OPTION) {
                    comparator.exportPubMed(path);
                    JOptionPane.showMessageDialog(null, "Successfully exported all genes!", "Success", 1);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Incorrect type of file to save!", "Error", 0);
            }
        } catch (NullPointerException e) {
            // Cancel or closing of dialog
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Cannot find location to save to!", "Error", 0);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "There was a problem saving the file", "Error", 0);
        } catch (NullExportException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", 0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Unreported error occured: " + e.getMessage(), "Error", 0);
        }
    }//GEN-LAST:event_buttonExGenesActionPerformed

    private void buttonExPubMedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExPubMedActionPerformed
        try {
            String path = browseFile(2);
            if (!path.endsWith(".txt")) {
                path += ".txt";
            }
            File file = new File(path);
            if (path != null & !file.exists() & !file.isDirectory()) {
                comparator.exportPubMed(path);
                JOptionPane.showMessageDialog(null, "Successfully exported all associated PubMed identifiers!", "Success", 1);
            } else if (file.exists() & !file.isDirectory()) {
                int reply = JOptionPane.showConfirmDialog(null, String.format("Are you sure you want to overwrite '%s' with PMID's?", file.getName()), "Warning", 0);
                if (reply == JOptionPane.YES_OPTION) {
                    comparator.exportPubMed(path);
                    JOptionPane.showMessageDialog(null, "Successfully exported all associated PubMed identifiers!", "Success", 1);
                }
            } else {
                System.out.println("Test");
                JOptionPane.showMessageDialog(null, "Incorrect type of file to save!", "Error", 0);
            }
        } catch (NullPointerException e) {
            // Cancel or closing of dialog
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Cannot find location to save to!", "Error", 0);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "There was a problem saving the file", "Error", 0);
        } catch (NullExportException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", 0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Unreported error occured: " + e.toString(), "Error", 0);
        }
    }//GEN-LAST:event_buttonExPubMedActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Windows is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterCompGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterCompGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterCompGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterCompGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterCompGUI().setVisible(true);
            }
        });
    }

    private void addPathListener() {
        fieldPath.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                checkTextField();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                checkTextField();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                checkTextField();
            }

            public void checkTextField() {
                if (fieldPath.getText().equals("")) {
                    buttonOpen.setEnabled(false);
                } else {
                    buttonOpen.setEnabled(true);
                }
            }
        });
    }

    private String browseFile(int function) {
        int reply = JFileChooser.UNDEFINED_CONDITION;
        JFileChooser fileChooser = new JFileChooser();
        // Om makkelijker het bestand te openen
        if (DEBUG) {
            fileChooser.setCurrentDirectory(new File("C:/Users/Alexander/Desktop/Bio-Informatica/Jaar_2/Blok_6/Tentamen informatica/(Test)data"));
        }
        if (function == 0) {
            fileChooser.setDialogTitle("Choose a file with interactions");
            reply = fileChooser.showOpenDialog(this);
        }
        if (function == 1) {
            fileChooser.setDialogTitle("Choose a location for exporting genes");
            fileChooser.setFileFilter(new FileNameExtensionFilter("Tab-delimited text file (*.txt)", "txt"));
            fileChooser.setAcceptAllFileFilterUsed(false);
            fileChooser.setSelectedFile(new File("Genes"));
            reply = fileChooser.showDialog(this, "Export");
        }
        if (function == 2) {
            fileChooser.setDialogTitle("Choose a location for exporting PubMed identifiers");
            fileChooser.setFileFilter(new FileNameExtensionFilter("Line separated identifiers (*.txt)", "txt"));
            fileChooser.setAcceptAllFileFilterUsed(false);
            fileChooser.setSelectedFile(new File("PMIDs"));
            reply = fileChooser.showDialog(this, "Export");
        }
        if (reply == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            return selectedFile.getAbsolutePath();
        } else {
            return null;
        }
    }

    private void updateFields() {
        for (String s : file.getTypes()) {
            comboIntLeft.addItem(s);
            comboIntRight.addItem(s);
        }
        textSummary.setText(file.getStatsText());
        textSummary.setEnabled(true);
        scrollSummary.setEnabled(true);
        labelInteraction.setEnabled(true);
        comboIntLeft.setEnabled(true);
        comboIntRight.setEnabled(true);
        buttonCompare.setEnabled(true);
        panelVenn.setEnabled(true);
        panelVenn.setBackground(Color.WHITE);
    }

    private void drawVennDiagram() {
        Graphics paper = panelVenn.getGraphics();
        panelVenn.removeAll();
        paper.setColor(Color.WHITE);
        paper.fillRect(0, 0, panelVenn.getWidth(), panelVenn.getHeight());

        char[] typeA = comparator.getTypeA().toCharArray();
        char[] typeB = comparator.getTypeB().toCharArray();
        char[] genesA = Integer.toString(comparator.getGenesA().size()).toCharArray();
        char[] genesIntersection = Integer.toString(comparator.getGenesIntersection().size()).toCharArray();
        char[] genesB = Integer.toString(comparator.getGenesB().size()).toCharArray();

        int xUnit = panelVenn.getWidth() / 20;
        int yUnit = panelVenn.getHeight() / 20;

        paper.setColor(Color.BLUE);
        paper.drawOval(xUnit * 2, panelVenn.getHeight() / 4, panelVenn.getWidth() / 2, panelVenn.getHeight() / 2);
        paper.drawOval(xUnit * 8, panelVenn.getHeight() / 4, panelVenn.getWidth() / 2, panelVenn.getHeight() / 2);

        paper.setColor(Color.BLACK);
        paper.drawChars(typeA, 0, typeA.length, xUnit * 5, yUnit * 4);
        paper.drawChars(typeB, 0, typeB.length, xUnit * 13, yUnit * 4);
        paper.drawChars(genesA, 0, genesA.length, xUnit * 6, yUnit * 11);
        paper.drawChars(genesIntersection, 0, genesIntersection.length, xUnit * 10, yUnit * 11);
        paper.drawChars(genesB, 0, genesB.length, xUnit * 14, yUnit * 11);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBrowse;
    private javax.swing.JButton buttonCompare;
    private javax.swing.JButton buttonExGenes;
    private javax.swing.JButton buttonExPubMed;
    private javax.swing.JButton buttonOpen;
    private javax.swing.JComboBox<String> comboIntLeft;
    private javax.swing.JComboBox<String> comboIntRight;
    private javax.swing.JTextField fieldPath;
    private javax.swing.JLabel labelFile;
    private javax.swing.JLabel labelInteraction;
    private javax.swing.JPanel panelVenn;
    private javax.swing.JScrollPane scrollSummary;
    private javax.swing.JTextArea textSummary;
    // End of variables declaration//GEN-END:variables
}
